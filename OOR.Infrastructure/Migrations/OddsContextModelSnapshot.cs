// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OOR.Infrastructure.Context;

#nullable disable

namespace OOR.Infrastructure.Migrations
{
    [DbContext(typeof(OddsContext))]
    partial class OddsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BroadcastFixture", b =>
                {
                    b.Property<int>("BroadcastsId")
                        .HasColumnType("integer");

                    b.Property<int>("FixturesId")
                        .HasColumnType("integer");

                    b.HasKey("BroadcastsId", "FixturesId");

                    b.HasIndex("FixturesId");

                    b.ToTable("BroadcastFixture");
                });

            modelBuilder.Entity("OOR.Domain.Entities.BaseballBattingStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AtBats")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingGroundIntoDoublePlay")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingHitByPitch")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingIntentionalWalks")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingPickedOff")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingPlateAppearances")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingSacrificeFlies")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingSacrificeHits")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingStrikeouts")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingWalks")
                        .HasColumnType("integer");

                    b.Property<int?>("CaughtStealing")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Doubles")
                        .HasColumnType("integer");

                    b.Property<int?>("FixtureId")
                        .HasColumnType("integer");

                    b.Property<int?>("Hits")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeRuns")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int?>("Rbi")
                        .HasColumnType("integer");

                    b.Property<int?>("Runs")
                        .HasColumnType("integer");

                    b.Property<bool?>("Starter")
                        .HasColumnType("boolean");

                    b.Property<int?>("StolenBases")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalBases")
                        .HasColumnType("integer");

                    b.Property<int?>("Triples")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.HasIndex("PlayerId");

                    b.ToTable("BaseballBattingStats");
                });

            modelBuilder.Entity("OOR.Domain.Entities.BaseballPitchingStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BattersFaced")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingFlyballsAllowed")
                        .HasColumnType("integer");

                    b.Property<int?>("BattingGroundballsAllowed")
                        .HasColumnType("integer");

                    b.Property<bool?>("BlownSavePitcher")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CompleteGame")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DoublesAllowed")
                        .HasColumnType("integer");

                    b.Property<int?>("EarnedRuns")
                        .HasColumnType("integer");

                    b.Property<int?>("FixtureId")
                        .HasColumnType("integer");

                    b.Property<int?>("GroundIntoDoublePlayAllowed")
                        .HasColumnType("integer");

                    b.Property<int?>("HitsAllowed")
                        .HasColumnType("integer");

                    b.Property<bool?>("HoldingPitcher")
                        .HasColumnType("boolean");

                    b.Property<int?>("HomeRunsAllowed")
                        .HasColumnType("integer");

                    b.Property<decimal?>("InningsPitched")
                        .HasColumnType("numeric");

                    b.Property<bool?>("LosingPitcher")
                        .HasColumnType("boolean");

                    b.Property<int?>("PitchCount")
                        .HasColumnType("integer");

                    b.Property<int?>("PitchingBalks")
                        .HasColumnType("integer");

                    b.Property<int?>("PitchingBalls")
                        .HasColumnType("integer");

                    b.Property<int?>("PitchingHitBatsmen")
                        .HasColumnType("integer");

                    b.Property<int?>("PitchingIntentionalWalks")
                        .HasColumnType("integer");

                    b.Property<bool?>("PitchingNoHitter")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PitchingPerfectGame")
                        .HasColumnType("boolean");

                    b.Property<int?>("PitchingPickoffs")
                        .HasColumnType("integer");

                    b.Property<bool?>("PitchingShutout")
                        .HasColumnType("boolean");

                    b.Property<int?>("PitchingStrikes")
                        .HasColumnType("integer");

                    b.Property<int?>("PitchingWalks")
                        .HasColumnType("integer");

                    b.Property<int?>("PitchingWildPitches")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int?>("RunsAllowed")
                        .HasColumnType("integer");

                    b.Property<int?>("SacrificeFliesAllowed")
                        .HasColumnType("integer");

                    b.Property<int?>("SacrificeHitsAllowed")
                        .HasColumnType("integer");

                    b.Property<bool?>("SavePitcher")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Starter")
                        .HasColumnType("boolean");

                    b.Property<int?>("StolenBasesAllowed")
                        .HasColumnType("integer");

                    b.Property<int?>("Strikeouts")
                        .HasColumnType("integer");

                    b.Property<int?>("TriplesAllowed")
                        .HasColumnType("integer");

                    b.Property<bool?>("WinningPitcher")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.HasIndex("PlayerId");

                    b.ToTable("BaseballPitchingStats");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Broadcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Network")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Broadcasts");
                });

            modelBuilder.Entity("OOR.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("LeagueId");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ConferenceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ConferenceId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Fixture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsLive")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumericalId")
                        .HasColumnType("integer");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentStageId")
                        .HasColumnType("integer");

                    b.Property<int?>("VenueId")
                        .HasColumnType("integer");

                    b.Property<int?>("WeatherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("SeasonId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentStageId");

                    b.HasIndex("VenueId");

                    b.HasIndex("WeatherId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("OOR.Domain.Entities.FixtureSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FixtureId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceId")
                        .HasColumnType("text");

                    b.Property<string>("SourceSystem")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.ToTable("FixtureSources");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Future", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsLive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Futures");
                });

            modelBuilder.Entity("OOR.Domain.Entities.FuturesOdd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FutureId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupKey")
                        .HasColumnType("text");

                    b.Property<bool?>("IsLive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxLimit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinLimit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("SelectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("SportsbookId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Timestamp")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FutureId");

                    b.HasIndex("SelectionId");

                    b.HasIndex("SportsbookId");

                    b.HasIndex("TeamId");

                    b.ToTable("FuturesOdds");
                });

            modelBuilder.Entity("OOR.Domain.Entities.GraderOdd", b =>
                {
                    b.Property<int>("FixtureId")
                        .HasColumnType("integer");

                    b.Property<int>("SelectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<string>("AwayTeamDisplay")
                        .HasColumnType("text");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<string>("HomeTeamDisplay")
                        .HasColumnType("text");

                    b.Property<int?>("PlayerScore")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("FixtureId", "SelectionId");

                    b.HasIndex("FixtureId")
                        .IsUnique();

                    b.HasIndex("SelectionId");

                    b.HasIndex("StatusId");

                    b.ToTable("GraderOdds");
                });

            modelBuilder.Entity("OOR.Domain.Entities.HistoricalOdd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FixtureId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsLive")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxLimit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinLimit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("SelectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("SportsbookId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Timestamp")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FixtureId");

                    b.HasIndex("SelectionId");

                    b.HasIndex("SportsbookId");

                    b.ToTable("HistoricalOdds");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Injury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("ExpectedReturnDate")
                        .HasColumnType("date");

                    b.Property<string>("InjuryType")
                        .HasColumnType("text");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Injurys");
                });

            modelBuilder.Entity("OOR.Domain.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int?>("SportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.HasIndex("SportId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("OOR.Domain.Entities.LineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("LineTypes");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("integer");

                    b.Property<int?>("SportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PeriodId");

                    b.HasIndex("SportId");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("OOR.Domain.Entities.MarketLeagueSportsbook", b =>
                {
                    b.Property<int>("MarketId")
                        .HasColumnType("integer");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("SportsbookId")
                        .HasColumnType("integer");

                    b.HasKey("MarketId", "LeagueId", "SportsbookId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SportsbookId");

                    b.ToTable("MarketLeagueSportsbooks");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Odd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FixtureId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupKey")
                        .HasColumnType("text");

                    b.Property<bool?>("IsLive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Locked")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxLimit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinLimit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("SelectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("SportsbookId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Timestamp")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FixtureId");

                    b.HasIndex("SelectionId");

                    b.HasIndex("SportsbookId");

                    b.ToTable("Odds");
                });

            modelBuilder.Entity("OOR.Domain.Entities.OddsJson", b =>
                {
                    b.Property<int>("OddsId")
                        .HasColumnType("integer");

                    b.Property<string>("Json")
                        .HasColumnType("text");

                    b.HasKey("OddsId");

                    b.ToTable("OddsJsons");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("SportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("SportId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FixtureId")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FixtureId");

                    b.HasIndex("StatusId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("OOR.Domain.Entities.ResultsJson", b =>
                {
                    b.Property<int>("ResultsId")
                        .HasColumnType("integer");

                    b.Property<string>("Json")
                        .HasColumnType("text");

                    b.HasKey("ResultsId");

                    b.ToTable("ResultsJsons");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("SeasonTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Week")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeasonTypeId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("OOR.Domain.Entities.SeasonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("SeasonTypes");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Selection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<int?>("LineTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("MarketId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Points")
                        .HasColumnType("numeric");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LineTypeId");

                    b.HasIndex("MarketId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("OOR.Domain.Entities.SoccerPlayerStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AerialDuelsLost")
                        .HasColumnType("integer");

                    b.Property<int?>("AerialDuelsWon")
                        .HasColumnType("integer");

                    b.Property<int?>("Assists")
                        .HasColumnType("integer");

                    b.Property<int?>("BallRecoveries")
                        .HasColumnType("integer");

                    b.Property<int?>("BlockedShots")
                        .HasColumnType("integer");

                    b.Property<int?>("Clearances")
                        .HasColumnType("integer");

                    b.Property<int?>("CornersTaken")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CrossesSuccessful")
                        .HasColumnType("integer");

                    b.Property<int?>("CrossesTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("DuelsLost")
                        .HasColumnType("integer");

                    b.Property<int?>("DuelsWon")
                        .HasColumnType("integer");

                    b.Property<int?>("FixtureId")
                        .HasColumnType("integer");

                    b.Property<int?>("FormationPlace")
                        .HasColumnType("integer");

                    b.Property<int?>("ForwardPasses")
                        .HasColumnType("integer");

                    b.Property<int?>("Fouls")
                        .HasColumnType("integer");

                    b.Property<int?>("FoulsWon")
                        .HasColumnType("integer");

                    b.Property<int?>("Goals")
                        .HasColumnType("integer");

                    b.Property<int?>("Interceptions")
                        .HasColumnType("integer");

                    b.Property<int?>("MinutesPlayed")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int?>("RedCards")
                        .HasColumnType("integer");

                    b.Property<int?>("ShotsOffTarget")
                        .HasColumnType("integer");

                    b.Property<int?>("ShotsOnTarget")
                        .HasColumnType("integer");

                    b.Property<bool?>("Starter")
                        .HasColumnType("boolean");

                    b.Property<int?>("SuccessfulPasses")
                        .HasColumnType("integer");

                    b.Property<int?>("TacklesSuccessful")
                        .HasColumnType("integer");

                    b.Property<int?>("TacklesTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("TimesTackled")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalPasses")
                        .HasColumnType("integer");

                    b.Property<int?>("Touches")
                        .HasColumnType("integer");

                    b.Property<int?>("TouchesInOppositionBox")
                        .HasColumnType("integer");

                    b.Property<int?>("UnsuccessfulPasses")
                        .HasColumnType("integer");

                    b.Property<int?>("YellowCards")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.HasIndex("PlayerId");

                    b.ToTable("SoccerPlayerStats");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Sportsbook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Sportsbooks");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Statuss");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("integer");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DivisionId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("OOR.Domain.Entities.TeamFixtureDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FixtureId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsHome")
                        .HasColumnType("boolean");

                    b.Property<string>("Record")
                        .HasColumnType("text");

                    b.Property<int?>("RotationNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Seed")
                        .HasColumnType("text");

                    b.Property<string>("Starter")
                        .HasColumnType("text");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamFixtureDetails");
                });

            modelBuilder.Entity("OOR.Domain.Entities.TeamsLeague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamsLeagues");
                });

            modelBuilder.Entity("OOR.Domain.Entities.TennisPlayerStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Aces")
                        .HasColumnType("integer");

                    b.Property<int?>("BreakPointsConverted")
                        .HasColumnType("integer");

                    b.Property<int?>("BreakPointsSaved")
                        .HasColumnType("integer");

                    b.Property<int?>("BreakPointsTotal")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DoubleFaults")
                        .HasColumnType("integer");

                    b.Property<int?>("FirstServePointsTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("FirstServePointsWon")
                        .HasColumnType("integer");

                    b.Property<int?>("FirstServeReturnPointsTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("FirstServeReturnPointsWon")
                        .HasColumnType("integer");

                    b.Property<int?>("FirstServesIn")
                        .HasColumnType("integer");

                    b.Property<int?>("FirstServesTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("FixtureId")
                        .HasColumnType("integer");

                    b.Property<int?>("GamesWon")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxGamesInRow")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxPointsInRow")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int?>("PointsTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("ReturnPointsWon")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondServePointsTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondServePointsWon")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondServeReturnPointsTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondServeReturnPointsWon")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondServesIn")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondServesTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceGamesTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceGamesWon")
                        .HasColumnType("integer");

                    b.Property<int?>("TiebreaksWon")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TennisPlayerStats");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("LeagueId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("OOR.Domain.Entities.TournamentStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("SportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("SportId");

                    b.ToTable("TournamentStages");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsNeutral")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("OOR.Domain.Entities.WeatherCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("WeatherConditions");
                });

            modelBuilder.Entity("BroadcastFixture", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Broadcast", null)
                        .WithMany()
                        .HasForeignKey("BroadcastsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOR.Domain.Entities.Fixture", null)
                        .WithMany()
                        .HasForeignKey("FixturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OOR.Domain.Entities.BaseballBattingStat", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Fixture", "Fixture")
                        .WithMany("BaseballBattingStats")
                        .HasForeignKey("FixtureId");

                    b.HasOne("OOR.Domain.Entities.Player", "Player")
                        .WithMany("BaseballBattingStats")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Fixture");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("OOR.Domain.Entities.BaseballPitchingStat", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Fixture", "Fixture")
                        .WithMany("BaseballPitchingStats")
                        .HasForeignKey("FixtureId");

                    b.HasOne("OOR.Domain.Entities.Player", "Player")
                        .WithMany("BaseballPitchingStats")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Fixture");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("OOR.Domain.Entities.City", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Conference", b =>
                {
                    b.HasOne("OOR.Domain.Entities.League", "League")
                        .WithMany("Conferences")
                        .HasForeignKey("LeagueId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Division", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Conference", "Conference")
                        .WithMany("Divisions")
                        .HasForeignKey("ConferenceId");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Fixture", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Season", "Season")
                        .WithMany("Fixtures")
                        .HasForeignKey("SeasonId");

                    b.HasOne("OOR.Domain.Entities.Status", "Status")
                        .WithMany("Fixtures")
                        .HasForeignKey("StatusId");

                    b.HasOne("OOR.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Fixtures")
                        .HasForeignKey("TournamentId");

                    b.HasOne("OOR.Domain.Entities.TournamentStage", "TournamentStage")
                        .WithMany("Fixtures")
                        .HasForeignKey("TournamentStageId");

                    b.HasOne("OOR.Domain.Entities.Venue", "Venue")
                        .WithMany("Fixtures")
                        .HasForeignKey("VenueId");

                    b.HasOne("OOR.Domain.Entities.WeatherCondition", "Weather")
                        .WithMany("Fixtures")
                        .HasForeignKey("WeatherId");

                    b.Navigation("Season");

                    b.Navigation("Status");

                    b.Navigation("Tournament");

                    b.Navigation("TournamentStage");

                    b.Navigation("Venue");

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("OOR.Domain.Entities.FixtureSource", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Fixture", "Fixture")
                        .WithMany("FixtureSources")
                        .HasForeignKey("FixtureId");

                    b.Navigation("Fixture");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Future", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Status", "Status")
                        .WithMany("Futures")
                        .HasForeignKey("StatusId");

                    b.HasOne("OOR.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Futures")
                        .HasForeignKey("TournamentId");

                    b.Navigation("Status");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("OOR.Domain.Entities.FuturesOdd", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Future", "Future")
                        .WithMany("FuturesOdds")
                        .HasForeignKey("FutureId");

                    b.HasOne("OOR.Domain.Entities.Selection", "Selection")
                        .WithMany("FuturesOdds")
                        .HasForeignKey("SelectionId");

                    b.HasOne("OOR.Domain.Entities.Sportsbook", "Sportsbook")
                        .WithMany("FuturesOdds")
                        .HasForeignKey("SportsbookId");

                    b.HasOne("OOR.Domain.Entities.Team", "Team")
                        .WithMany("FuturesOdds")
                        .HasForeignKey("TeamId");

                    b.Navigation("Future");

                    b.Navigation("Selection");

                    b.Navigation("Sportsbook");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OOR.Domain.Entities.GraderOdd", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Fixture", "Fixture")
                        .WithOne("GraderOdd")
                        .HasForeignKey("OOR.Domain.Entities.GraderOdd", "FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOR.Domain.Entities.Selection", "Selection")
                        .WithMany()
                        .HasForeignKey("SelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOR.Domain.Entities.Status", "Status")
                        .WithMany("GraderOdds")
                        .HasForeignKey("StatusId");

                    b.Navigation("Fixture");

                    b.Navigation("Selection");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("OOR.Domain.Entities.HistoricalOdd", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Fixture", "Fixture")
                        .WithMany("HistoricalOdds")
                        .HasForeignKey("FixtureId");

                    b.HasOne("OOR.Domain.Entities.Selection", "Selection")
                        .WithMany("HistoricalOdds")
                        .HasForeignKey("SelectionId");

                    b.HasOne("OOR.Domain.Entities.Sportsbook", "Sportsbook")
                        .WithMany("HistoricalOdds")
                        .HasForeignKey("SportsbookId");

                    b.Navigation("Fixture");

                    b.Navigation("Selection");

                    b.Navigation("Sportsbook");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Injury", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Player", "Player")
                        .WithMany("Injuries")
                        .HasForeignKey("PlayerId");

                    b.HasOne("OOR.Domain.Entities.Status", "Status")
                        .WithMany("Injuries")
                        .HasForeignKey("StatusId");

                    b.Navigation("Player");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("OOR.Domain.Entities.League", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Region", "Region")
                        .WithMany("Leagues")
                        .HasForeignKey("RegionId");

                    b.HasOne("OOR.Domain.Entities.Sport", "Sport")
                        .WithMany("Leagues")
                        .HasForeignKey("SportId");

                    b.Navigation("Region");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Market", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Period", null)
                        .WithMany("Markets")
                        .HasForeignKey("PeriodId");

                    b.HasOne("OOR.Domain.Entities.Sport", "Sport")
                        .WithMany("Markets")
                        .HasForeignKey("SportId");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("OOR.Domain.Entities.MarketLeagueSportsbook", b =>
                {
                    b.HasOne("OOR.Domain.Entities.League", "League")
                        .WithMany("MarketLeagueSportsbooks")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOR.Domain.Entities.Market", "Market")
                        .WithMany("MarketLeagueSportsbooks")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOR.Domain.Entities.Sportsbook", "Sportsbook")
                        .WithMany("MarketLeagueSportsbooks")
                        .HasForeignKey("SportsbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Market");

                    b.Navigation("Sportsbook");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Odd", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Fixture", "Fixture")
                        .WithMany("Odds")
                        .HasForeignKey("FixtureId");

                    b.HasOne("OOR.Domain.Entities.Selection", "Selection")
                        .WithMany("Odds")
                        .HasForeignKey("SelectionId");

                    b.HasOne("OOR.Domain.Entities.Sportsbook", "Sportsbook")
                        .WithMany("Odds")
                        .HasForeignKey("SportsbookId");

                    b.Navigation("Fixture");

                    b.Navigation("Selection");

                    b.Navigation("Sportsbook");
                });

            modelBuilder.Entity("OOR.Domain.Entities.OddsJson", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Odd", "Odds")
                        .WithOne("OddsJson")
                        .HasForeignKey("OOR.Domain.Entities.OddsJson", "OddsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Odds");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Period", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Sport", "Sport")
                        .WithMany("Periods")
                        .HasForeignKey("SportId");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Player", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Status", "Status")
                        .WithMany("Players")
                        .HasForeignKey("StatusId");

                    b.HasOne("OOR.Domain.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Status");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Result", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Fixture", "Fixture")
                        .WithMany("Results")
                        .HasForeignKey("FixtureId");

                    b.HasOne("OOR.Domain.Entities.Status", "Status")
                        .WithMany("Results")
                        .HasForeignKey("StatusId");

                    b.Navigation("Fixture");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("OOR.Domain.Entities.ResultsJson", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Result", "Results")
                        .WithOne("ResultsJson")
                        .HasForeignKey("OOR.Domain.Entities.ResultsJson", "ResultsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Results");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Season", b =>
                {
                    b.HasOne("OOR.Domain.Entities.SeasonType", "SeasonType")
                        .WithMany("Seasons")
                        .HasForeignKey("SeasonTypeId");

                    b.Navigation("SeasonType");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Selection", b =>
                {
                    b.HasOne("OOR.Domain.Entities.LineType", "LineType")
                        .WithMany("Selections")
                        .HasForeignKey("LineTypeId");

                    b.HasOne("OOR.Domain.Entities.Market", "Market")
                        .WithMany("Selections")
                        .HasForeignKey("MarketId");

                    b.HasOne("OOR.Domain.Entities.Player", "Player")
                        .WithMany("Selections")
                        .HasForeignKey("PlayerId");

                    b.HasOne("OOR.Domain.Entities.Team", "Team")
                        .WithMany("Selections")
                        .HasForeignKey("TeamId");

                    b.Navigation("LineType");

                    b.Navigation("Market");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OOR.Domain.Entities.SoccerPlayerStat", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Fixture", "Fixture")
                        .WithMany("SoccerPlayerStats")
                        .HasForeignKey("FixtureId");

                    b.HasOne("OOR.Domain.Entities.Player", "Player")
                        .WithMany("SoccerPlayerStats")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Fixture");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Team", b =>
                {
                    b.HasOne("OOR.Domain.Entities.City", "City")
                        .WithMany("Teams")
                        .HasForeignKey("CityId");

                    b.HasOne("OOR.Domain.Entities.Division", "Division")
                        .WithMany("Teams")
                        .HasForeignKey("DivisionId");

                    b.Navigation("City");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("OOR.Domain.Entities.TeamFixtureDetail", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Fixture", "Fixture")
                        .WithMany("TeamFixtureDetails")
                        .HasForeignKey("FixtureId");

                    b.HasOne("OOR.Domain.Entities.Team", "Team")
                        .WithMany("TeamFixtureDetails")
                        .HasForeignKey("TeamId");

                    b.Navigation("Fixture");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OOR.Domain.Entities.TeamsLeague", b =>
                {
                    b.HasOne("OOR.Domain.Entities.League", "League")
                        .WithMany("TeamsLeagues")
                        .HasForeignKey("LeagueId");

                    b.HasOne("OOR.Domain.Entities.Season", "Season")
                        .WithMany("TeamsLeagues")
                        .HasForeignKey("SeasonId");

                    b.HasOne("OOR.Domain.Entities.Team", "Team")
                        .WithMany("TeamsLeagues")
                        .HasForeignKey("TeamId");

                    b.Navigation("League");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OOR.Domain.Entities.TennisPlayerStat", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Fixture", "Fixture")
                        .WithMany("TennisPlayerStats")
                        .HasForeignKey("FixtureId");

                    b.HasOne("OOR.Domain.Entities.Player", "Player")
                        .WithMany("TennisPlayerStats")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Fixture");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("OOR.Domain.Entities.League", "League")
                        .WithMany("Tournaments")
                        .HasForeignKey("LeagueId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("OOR.Domain.Entities.TournamentStage", b =>
                {
                    b.HasOne("OOR.Domain.Entities.Sport", "Sport")
                        .WithMany("TournamentStages")
                        .HasForeignKey("SportId");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Venue", b =>
                {
                    b.HasOne("OOR.Domain.Entities.City", "City")
                        .WithMany("Venues")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("OOR.Domain.Entities.City", b =>
                {
                    b.Navigation("Teams");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Conference", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Division", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Fixture", b =>
                {
                    b.Navigation("BaseballBattingStats");

                    b.Navigation("BaseballPitchingStats");

                    b.Navigation("FixtureSources");

                    b.Navigation("GraderOdd");

                    b.Navigation("HistoricalOdds");

                    b.Navigation("Odds");

                    b.Navigation("Results");

                    b.Navigation("SoccerPlayerStats");

                    b.Navigation("TeamFixtureDetails");

                    b.Navigation("TennisPlayerStats");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Future", b =>
                {
                    b.Navigation("FuturesOdds");
                });

            modelBuilder.Entity("OOR.Domain.Entities.League", b =>
                {
                    b.Navigation("Conferences");

                    b.Navigation("MarketLeagueSportsbooks");

                    b.Navigation("TeamsLeagues");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("OOR.Domain.Entities.LineType", b =>
                {
                    b.Navigation("Selections");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Market", b =>
                {
                    b.Navigation("MarketLeagueSportsbooks");

                    b.Navigation("Selections");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Odd", b =>
                {
                    b.Navigation("OddsJson");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Period", b =>
                {
                    b.Navigation("Markets");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Player", b =>
                {
                    b.Navigation("BaseballBattingStats");

                    b.Navigation("BaseballPitchingStats");

                    b.Navigation("Injuries");

                    b.Navigation("Selections");

                    b.Navigation("SoccerPlayerStats");

                    b.Navigation("TennisPlayerStats");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Region", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Result", b =>
                {
                    b.Navigation("ResultsJson");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Season", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("TeamsLeagues");
                });

            modelBuilder.Entity("OOR.Domain.Entities.SeasonType", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Selection", b =>
                {
                    b.Navigation("FuturesOdds");

                    b.Navigation("HistoricalOdds");

                    b.Navigation("Odds");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Sport", b =>
                {
                    b.Navigation("Leagues");

                    b.Navigation("Markets");

                    b.Navigation("Periods");

                    b.Navigation("TournamentStages");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Sportsbook", b =>
                {
                    b.Navigation("FuturesOdds");

                    b.Navigation("HistoricalOdds");

                    b.Navigation("MarketLeagueSportsbooks");

                    b.Navigation("Odds");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Status", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("Futures");

                    b.Navigation("GraderOdds");

                    b.Navigation("Injuries");

                    b.Navigation("Players");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Team", b =>
                {
                    b.Navigation("FuturesOdds");

                    b.Navigation("Players");

                    b.Navigation("Selections");

                    b.Navigation("TeamFixtureDetails");

                    b.Navigation("TeamsLeagues");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Tournament", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("Futures");
                });

            modelBuilder.Entity("OOR.Domain.Entities.TournamentStage", b =>
                {
                    b.Navigation("Fixtures");
                });

            modelBuilder.Entity("OOR.Domain.Entities.Venue", b =>
                {
                    b.Navigation("Fixtures");
                });

            modelBuilder.Entity("OOR.Domain.Entities.WeatherCondition", b =>
                {
                    b.Navigation("Fixtures");
                });
#pragma warning restore 612, 618
        }
    }
}
